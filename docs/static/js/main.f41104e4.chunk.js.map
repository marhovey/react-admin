{"version":3,"sources":["router/routerConfig.ts","router/index.tsx","store/reducers/myReducer.ts","store/types/index.ts","store/reducers/index.ts","App.tsx","store/index.ts","serviceWorker.ts","index.tsx","router/subRoute.jsx"],"names":["Index","loadable","routeConfig","path","exact","component","id","name","routes","MyRouter","map","route","key","myReducer","handleActions","state","action","payload","combineReducers","moment","locale","store","createStore","rootReducer","message","config","duration","maxCount","notification","placement","bottom","App","zhCN","from","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","SubRoute","props"],"mappings":"mOAYMA,EAAQC,aAAS,kBAAM,8EAOhBC,EAAuC,CAClD,CACEC,KAAM,SACNC,OAAO,EACPC,UAVUJ,aAAS,kBAAM,uEAWzBK,GAAI,GACJC,KAAM,eACNC,OAAQ,IAEV,CACEL,KAAM,SACNC,OAAO,EACPC,UAAWL,EACXM,GAAI,IACJC,KAAM,eACNC,OAAQ,CACN,CACEL,KAAM,gBACNC,OAAO,EACPC,UAxBOJ,aAAS,kBAAM,6EAyBtBK,GAAI,EACJC,KAAM,4BAER,CACEJ,KAAM,eACNC,OAAO,EACPC,UA9BOJ,aAAS,kBAAM,4EA+BtBK,GAAI,EACJC,KAAM,4BAER,CACEJ,KAAM,oBACNC,OAAO,EACPC,UApCWJ,aAAS,kBAAM,8EAqC1BK,GAAI,GACJC,KAAM,4BAER,CACEJ,KAAM,qBACNC,OAAO,EACPC,UA1CYJ,aAAS,kBAAM,6EA2C3BK,GAAI,GACJC,KAAM,+B,QCzDDE,EAAW,WACtB,OACE,kBAAC,IAAD,KAEIP,EAAYQ,KAAI,SAAAC,GACd,OAAO,kBAAC,IAAD,eAAUC,IAAKD,EAAML,IAAQK,S,yDCNjCE,EAAYC,YAAc,eCHb,cDIV,SAASC,EAAYC,GACjC,OAAO,2BACFD,GACAC,EAAOC,YAGb,IERYC,cAAgB,CAC7BL,c,0CCQFM,IAAOC,OAAO,SAEd,IAAMC,ECTUC,YAAYC,GDW5BC,IAAQC,OAAO,CACbC,SAAU,EACVC,SAAU,IAEZC,IAAaH,OAAO,CAClBI,UAAW,WACXC,OAAQ,GACRJ,SAAU,IAeGK,MAbf,WACE,OACE,kBAAC,IAAD,CAAUV,MAAOA,GACf,kBAAC,IAAD,CAAgBD,OAAQY,KACtB,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAUC,KAAM,IAAK7B,OAAK,EAAC8B,GAAI,eElBrBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3B,a,gCEjJ5B,6DAGa6B,EAAW,SAAC1C,GACvB,OACE,kBAAC,IAAD,CACEC,IAAKD,EAAML,GACXH,KAAMQ,EAAMR,KACZC,MAAOO,EAAMP,MACbqC,OAAQ,SAACa,GAAD,OACN,kBAAC3C,EAAMN,UAAP,eACEE,KAAMI,EAAMJ,KACZD,GAAIK,EAAML,IACNgD,EAHN,CAIE9C,OAAQG,EAAMH,QAAU,W","file":"static/js/main.f41104e4.chunk.js","sourcesContent":["import loadable from '@loadable/component';\nimport { RouteComponentProps } from 'react-router';\n\nexport interface RouteConfigProps {\n  path: string,\n  exact: boolean,\n  component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>,\n  id: number,\n  name?: string,\n  routes?: Array<RouteConfigProps>\n}\n\nconst Index = loadable(() => import('../pages/index'));\nconst Login = loadable(() => import('../pages/login'));\nconst Charts = loadable(() => import('../pages/charts'));\nconst Tables = loadable(() => import('../pages/table'));\nconst UserCenter = loadable(() => import('../pages/userCenter'));\nconst UserSetting = loadable(() => import('../pages/userSetting'));\n\nexport const routeConfig: Array<RouteConfigProps> = [\n  {\n    path: '/login',\n    exact: true,\n    component: Login,\n    id: 99,\n    name: '登陆',\n    routes: []\n  },\n  {\n    path: '/index',\n    exact: false,\n    component: Index,\n    id: 999,\n    name: '首页',\n    routes: [\n      {\n        path: '/index/charts',\n        exact: false,\n        component: Charts,\n        id: 1,\n        name: '数据中心',\n      },\n      {\n        path: '/index/table',\n        exact: false,\n        component: Tables,\n        id: 2,\n        name: '表格列表',\n      },\n      {\n        path: '/index/userCenter',\n        exact: false,\n        component: UserCenter,\n        id: 31,\n        name: '个人中心',\n      },\n      {\n        path: '/index/userSetting',\n        exact: false,\n        component: UserSetting,\n        id: 32,\n        name: '个人设置',\n      }\n    ]\n  }\n]","import React from 'react';\nimport {Switch} from 'react-router-dom';\nimport {routeConfig} from './routerConfig';\nimport {SubRoute} from './subRoute';\nexport const MyRouter = function() {\n  return (\n    <Switch>\n      {\n        routeConfig.map(route => {\n          return <SubRoute key={route.id} {...route} />\n        })\n      }\n    </Switch>\n  )\n}","import { STORE_DATA } from '../types';\nimport { handleActions } from 'redux-actions';\n\nexport const myReducer = handleActions({\n  [STORE_DATA]: function(state: any, action: any) {\n    return {\n      ...state,\n      ...action.payload\n    }\n  }\n}, {\n});","export const STORE_DATA = 'STORE_DATA'","import { combineReducers } from 'redux';\nimport { myReducer } from './myReducer';\nexport default combineReducers({\n  myReducer\n})","import React from 'react';\nimport { Provider } from 'react-redux';\nimport zhCN from 'antd/es/locale-provider/zh_CN';\nimport { HashRouter, Redirect } from 'react-router-dom';\nimport { MyRouter } from './router';\nimport { ConfigProvider, message, notification } from 'antd';\nimport storeConfig from './store';\nimport moment  from 'moment';\nimport 'moment/locale/zh-cn';\nimport 'antd/dist/antd.css';\nimport './App.css'\nmoment.locale('zh-cn');\n\nconst store = storeConfig();\n\nmessage.config({\n  duration: 2,\n  maxCount: 2\n});\nnotification.config({\n  placement: 'topRight',\n  bottom: 50,\n  duration: 2,\n});\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ConfigProvider locale={zhCN}>\n        <HashRouter>\n          <MyRouter />\n          <Redirect from={'*'} exact to={'/login'}></Redirect>\n        </HashRouter>\n      </ConfigProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nexport default function configStore () {\n  const store = createStore(rootReducer)\n  return store\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport {Route} from 'react-router-dom';\n\nexport const SubRoute = (route) => {\n  return (\n    <Route\n      key={route.id}\n      path={route.path}\n      exact={route.exact}\n      render={(props) => \n        <route.component\n          name={route.name}\n          id={route.id}\n          {...props}\n          routes={route.routes || []}\n        />\n      }\n    />\n  )\n}"],"sourceRoot":""}